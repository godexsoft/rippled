name: libxrpl
env:
  CONAN_URL: http://18.143.149.228:8081/artifactory/api/conan/conan-non-prod
  CONAN_LOGIN_USERNAME_RIPPLE: ${{ secrets.CONAN_USERNAME }}
  CONAN_PASSWORD_RIPPLE: ${{ secrets.CONAN_TOKEN }}
on:
  pull_request:
    paths:
      - 'src/ripple/protocol/impl/BuildInfo.cpp'
      - '.github/workflows/libxrpl.yml'
    branches: [release, develop]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: [self-hosted, heavy]
    container: rippleci/rippled-build-ubuntu:aaf5e3e
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: unlock Conan
        shell: bash
        run: conan remove --locks
      - name: export new package
        shell: bash
        run: |
          conan export . 
      - name: add Ripple Conan remote
        shell: bash
        run: |
          conan remote list
          conan remote remove ripple || true
          # Do not quote the URL. An empty string will be accepted (with
          # a non-fatal warning), but a missing argument will not.
          conan remote add ripple ${{ env.CONAN_URL }} --insert 0
      - name: parse new version
        id: version
        shell: bash
        run: |
          echo version=$(cat src/ripple/protocol/impl/BuildInfo.cpp \
            | grep "versionString =" | awk -F '"' '{print $2}') \
            | tee ${GITHUB_OUTPUT}
      - name: try to authenticate to Ripple Conan remote
        id: remote
        shell: bash
        run: |
          # `conan user` implicitly uses the environment variables
          # CONAN_LOGIN_USERNAME_<REMOTE> and CONAN_PASSWORD_<REMOTE>.
          # https://docs.conan.io/1/reference/commands/misc/user.html#using-environment-variables
          # https://docs.conan.io/1/reference/env_vars.html#conan-login-username-conan-login-username-remote-name
          # https://docs.conan.io/1/reference/env_vars.html#conan-password-conan-password-remote-name
          echo outcome=$(conan user --remote ripple --password >&2 \
            && echo success || echo failure) | tee ${GITHUB_OUTPUT}
      - name: upload new package
        if: (steps.remote.outputs.outcome == 'success')
        shell: bash
        run: |
          echo "conan upload version ${{ steps.version.outputs.version }}"
          conan upload xrpl/${{ steps.version.outputs.version }} --remote ripple --confirm
